server:
  port: 8081

spring:
  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=utf8
    username: ${DB_USER}
    password: ${DB_PASS}
    driver-class-name: com.mysql.cj.jdbc.Driver
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true         # 기존 스키마가 있을 때 처음 한번만 유용
    # schemas: smartcane              # 스키마를 명시적으로 쓰고 싶다면
    # default-schema: smartcane
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate   # 개발: update / 운영: validate 권장
      naming:
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    properties:
      hibernate:
        format_sql: true
        jdbc.time_zone: Asia/Seoul
  jackson:
    time-zone: Asia/Seoul

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}            # 카카오 REST API 키
            client-secret: ${KAKAO_CLIENT_SECRET:}   # 보통 공란(필요 시 입력)
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: ["account_email","profile_nickname"]
            client-name: Kakao
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: ["email","name","nickname"]
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri:         https://kauth.kakao.com/oauth/token
            user-info-uri:     https://kapi.kakao.com/v2/user/me
            user-name-attribute: id               # 카카오 고유 ID
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri:         https://nid.naver.com/oauth2.0/token
            user-info-uri:     https://openapi.naver.com/v1/nid/me
            user-name-attribute: response         # 최상위 키 'response' 내부의 id 사용

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace

smartcane:
  jwt:
    issuer: smartcane-api
    # 운영 환경에서는 Base64 인코딩된 키를 환경변수로 주입하는 게 안전합니다.
    secret: ${JWT_SECRET:change-me-super-secret-32bytes-min}
    access-exp-seconds: 900        # Access Token 만료: 15분
    refresh-exp-seconds: 2592000   # Refresh Token 만료: 30일
    clock-skew-seconds: 60         # 허용 시간 오차(초)

  oauth2:
    # 성공 시 프론트(웹) 또는 앱 딥링크로 리다이렉트
    success-redirect: ${OAUTH_SUCCESS_REDIRECT:http://localhost:5173/auth/success}
    failure-redirect: ${OAUTH_FAILURE_REDIRECT:http://localhost:5173/auth/failure}
  fare:
    currency: KRW
    bus-fare: 1400
    subway-fare: 1550
    discounts:
      accessible-user-rate: 0.5
      subscription-rate: 0.0
    transfer:
      enabled: true
      window-minutes: 30      # 환승 유효 시간(분)
      max-transfers: 4        # 최대 환승 횟수(추가 탑승 수)
      pricing:
        type: FREE            # FREE | FLAT | RATIO
        flat-amount: 0        # type=FLAT 시, 환승 1회당 정액
        ratio: 0.0            # type=RATIO 시, 환승 1회당 원요금 대비 비율(예: 0.5 = 50%)

billing:
  api-base-url: https://api.tosspayments.com
  secret-key: ${TOSS_SECRET_KEY}
  webhook:
    secret: ${TOSS_WEBHOOK_SECRET}